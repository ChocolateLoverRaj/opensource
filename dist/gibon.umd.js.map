{"version":3,"file":"gibon.umd.js","sources":["../node_modules/dush/dist/dush.es.js","../node_modules/dush-router/index.js","../src/index.js"],"sourcesContent":["/*!\n * dush <https://github.com/tunnckoCore/dush>\n *\n * Copyright (c) Charlike Mike Reagent <@tunnckoCore> (https://i.am.charlike.online)\n * Released under the MIT license.\n */\n\n/**\n * > A constructor function that returns an object\n * with a few methods.\n *\n * See [JSBin Example](http://jsbin.com/mepemeluhi/edit?js,console).\n *\n * **Example**\n *\n * ```js\n * const dush = require('dush')\n * const emitter = dush()\n *\n * console.log(emitter._allEvents) // => {}\n * console.log(emitter.on) // => Function\n * console.log(emitter.once) // => Function\n * console.log(emitter.off) // => Function\n * console.log(emitter.emit) // => Function\n * ```\n *\n * @name   dush()\n * @return {Object} methods\n * @api public\n */\n\nfunction dush () {\n  var _allEvents = Object.create(null);\n  var app = {\n    /**\n     * > An listeners map of all registered events\n     * and their listeners. A key/value store, where 1) value\n     * is an array of event listeners for the key and 2) key\n     * is the name of the event.\n     *\n     * See [JSBin Example](http://jsbin.com/fakajazafu/edit?js,console).\n     *\n     * **Example**\n     *\n     * ```js\n     * const emitter = dush()\n     *\n     * emitter.on('foo', () => {})\n     * emitter.on('foo', () => {})\n     * emitter.on('bar', () => {})\n     *\n     * console.log(emitter._allEvents)\n     * // => { foo: [Function, Function], bar: [Functon] }\n     *\n     * console.log(emitter._allEvents.foo.length) // => 2\n     * console.log(emitter._allEvents.bar.length) // => 1\n     * ```\n     *\n     * @name  ._allEvents\n     * @type {Object} `_allEvents` a key/value store of all events and their listeners\n     * @api public\n     */\n\n    _allEvents: _allEvents,\n\n    /**\n     * > Invokes `plugin` function immediately, which is passed\n     * with `app` instance. You can use it for adding more methods\n     * or properties to the instance. Useful if you want to make\n     * dush to work with DOM for example.\n     *\n     * **Example**\n     *\n     * ```js\n     * const app = dush()\n     *\n     * app.on('hi', (str) => {\n     *   console.log(str) // => 'Hello World!!'\n     * })\n     *\n     * app.use((app) => {\n     *   app.foo = 'bar'\n     *   app.hello = (place) => app.emit('hi', `Hello ${place}!!`)\n     * })\n     *\n     * console.log(app.foo) // => 'bar'\n     * app.hello('World')\n     * ```\n     *\n     * @name   .use\n     * @param  {Function} `plugin` A function passed with `(app, options)` signature\n     * @param  {Object} `options` optional, passed as second argument to `plugin` function\n     * @return {Object} self \"app\" for chaining\n     * @api public\n     */\n\n    use: function use (plugin, options) {\n      var ret = plugin(app, options);\n      return ret || app\n    },\n\n    /**\n     * > Add `handler` for `name` event.\n     *\n     * See [JSBin Example](http://jsbin.com/xeketuruto/edit?js,console).\n     *\n     * **Example**\n     *\n     * ```js\n     * const emitter = dush()\n     *\n     * emitter\n     *   .on('hi', (place) => {\n     *     console.log(`hello ${place}!`) // => 'hello world!'\n     *   })\n     *   .on('hi', (place) => {\n     *     console.log(`hi ${place}, yeah!`) // => 'hi world, yeah!'\n     *   })\n     *\n     * emitter.emit('hi', 'world')\n     * ```\n     *\n     * @name   .on\n     * @param  {String} `name` Type of event to listen for, or `'*'` for all events\n     * @param  {Function} `handler` Function to call in response to given event\n     * @param  {Boolean} `once` Make `handler` be called only once,\n     *                          the `.once` method use this internally\n     * @return {Object} self \"app\" for chaining\n     * @api public\n     */\n\n    on: function on (name, handler, once) {\n      var e = app._allEvents[name] || (app._allEvents[name] = []);\n\n      function func () {\n        if (!func.called) {\n          app.off(name, func);\n          handler.apply(handler, arguments);\n          func.called = true;\n        }\n      }\n\n      var fn = once ? func : handler;\n      fn.__sourceString = handler.toString();\n\n      e.push(fn);\n      return app\n    },\n\n    /**\n     * > Add `handler` for `name` event that\n     * will be called only one time.\n     *\n     * See [JSBin Example](http://jsbin.com/teculorima/edit?js,console).\n     *\n     * **Example**\n     *\n     * ```js\n     * const emitter = dush()\n     * let called = 0\n     *\n     * emitter.once('foo', () => {\n     *   console.log('called only once')\n     *   called++\n     * })\n     *\n     * emitter\n     *   .emit('foo', 111)\n     *   .emit('foo', 222)\n     *   .emit('foo', 333)\n     *\n     * console.log(called) // => 1\n     * ```\n     *\n     * @name   .once\n     * @param  {String} `name` Type of event to listen for, or `'*'` for all events\n     * @param  {Function} `handler` Function to call in response to given event\n     * @return {Object} self \"app\" for chaining\n     * @api public\n     */\n\n    once: function once (name, handler) {\n      app.on(name, handler, true);\n      return app\n    },\n\n    /**\n     * > Remove `handler` for `name` event. If `handler` not\n     * passed will remove **all** listeners for that `name` event.\n     *\n     * See [JSBin Example](http://jsbin.com/nujucoquvi/3/edit?js,console).\n     *\n     * **Example**\n     *\n     * ```js\n     * const emitter = dush()\n     *\n     * const handler = () => {\n     *   console.log('not called')\n     * }\n     *\n     * emitter.on('foo', handler)\n     * emitter.off('foo', handler)\n     *\n     * emitter.on('foo', (abc) => {\n     *   console.log('called', abc) // => 'called 123'\n     * })\n     * emitter.emit('foo', 123)\n     *\n     * // or removing all listeners of `foo`\n     * emitter.off('foo')\n     * emitter.emit('foo')\n     * ```\n     *\n     * @name   .off\n     * @param  {String} `name` Type of event to listen for, or `'*'` for all events\n     * @param  {Function} `handler` Function to call in response to given event\n     * @return {Object} self \"app\" for chaining\n     * @api public\n     */\n\n    off: function off (name, handler) {\n      if (handler && app._allEvents[name]) {\n        var fnStr = handler.toString();\n        app._allEvents[name] = app._allEvents[name].filter(function (func) { return func.__sourceString !== fnStr; });\n      } else if (name) {\n        app._allEvents[name] = [];\n      } else {\n        app._allEvents = Object.create(null);\n      }\n\n      return app\n    },\n\n    /**\n     * > Invoke all handlers for given `name` event.\n     * If present, `'*'` listeners are invoked too with `(type, ...rest)` signature,\n     * where the `type` argument is a string representing the name of the\n     * called event; and all of the rest arguments.\n     *\n     * See [JSBin Example](http://jsbin.com/muqujavolu/edit?js,console).\n     *\n     * **Example**\n     *\n     * ```js\n     * const emitter = dush()\n     *\n     * emitter.on('foo', (a, b, c) => {\n     *   console.log(`${a}, ${b}, ${c}`) // => 1, 2, 3\n     * })\n     *\n     * emitter.on('*', (name, a, b, c) => {\n     *   console.log(`name is: ${name}`)\n     *   console.log(`rest args are: ${a}, ${b}, ${c}`)\n     * })\n     *\n     * emitter.emit('foo', 1, 2, 3)\n     * emitter.emit('bar', 555)\n     * ```\n     *\n     * @name   .emit\n     * @param  {String} `name` The name of the event to invoke\n     * @param  {any} `args` Any number of arguments of any type of value, passed to each listener\n     * @return {Object} self \"app\" for chaining\n     * @api public\n     */\n\n    emit: function emit (name) {\n      if (name !== '*') {\n        var args = [].slice.call(arguments);\n        (app._allEvents[name] || []).map(function (handler) { handler.apply(handler, args.slice(1)); });\n        (app._allEvents['*'] || []).map(function (handler) { handler.apply(handler, args); });\n      }\n\n      return app\n    }\n  };\n\n  return app\n}\n\nexport default dush;\n","/*!\n * dush-router <https://github.com/tunnckoCore/dush-router>\n *\n * Copyright (c) Charlike Mike Reagent <@tunnckoCore> (https://i.am.charlike.online)\n * Released under the MIT license.\n */\n\n'use strict'\n\n/**\n * A plugin that adds `.createRoute`, `.addRoute` and `.navigate`\n * methods for any app based on [dush][], [base][] or [minibase][].\n * Notice that this plugin emit events - `route` if match, and `notFound` if\n * not route found on defined routes.\n *\n * **Example**\n *\n * ```js\n * var dush = require('dush')\n * var router = require('dush-router')\n *\n * var app = dush()\n * app.use(router())\n *\n * console.log(app._routes) // => []\n * console.log(app.createRoute) // => function\n * console.log(app.addRoute) // => function\n * console.log(app.navigate) // => function\n * ```\n *\n * @name   router()\n * @param  {Object} `opts` no options currently\n * @return {Function} a plugin function which should be passed to `.use` method\n * @api public\n */\n\nmodule.exports = function dushRouter () {\n  return function dushRouter_ (app) {\n    var el = null\n    app._routes = []\n\n    app.on('route', function onRoute (view, context) {\n      return view(context)\n    })\n\n    /**\n     * > Add/register an actual `route` with `handler`\n     * to the `app._routes` array. It uses `.createRoute` method\n     * to create an \"route\" object that is then pushed to `app._routes`.\n     *\n     * _**Note:** If route handler returns something the `app.navigate` method\n     * will return that exact value on route match._\n     *\n     * **Example**\n     *\n     * ```js\n     * app.addRoute('/foobar', (context) => {\n     *   console.log('state:', context.state) // => { hello: 'world' }\n     *   console.log('params:', context.params) // => {}\n     *   console.log('route:', context.route) // => '/foobar'\n     *   console.log('pathname:', context.pathname) // => '/foobar'\n     * })\n     *\n     * app.navigate('/foobar', { hello: 'world' })\n     *\n     * // or with params\n     * app.addRoute('/user/:id', ({ state, params, route, pathname }) => {\n     *   console.log('Hello ', state.username) // => 'Hello Charlike'\n     *   console.log('Your ID is', params.id) // => 'Your ID is 123'\n     *\n     *   console.log('route', route) // => '/user/:id'\n     *   console.log('path', pathname) // => '/user/123'\n     * })\n     *\n     * app.navigate('/user/123', { username: 'Charlike' })\n     * ```\n     *\n     * @name  .addRoute\n     * @param {String} `route` a simple route, express-like definition, e.g. `/user/:id`\n     * @param {Function} `handler` a function to be called when `route` match\n     * @return {Object} instance for chaining\n     * @api public\n     */\n\n    app.addRoute = function addRoute (route, handler) {\n      app._routes.push(app.createRoute(route, handler))\n      return app\n    }\n\n    /**\n     * > Just create a `route` with `handler`, same as `.addRoute` method,\n     * but without adding it to `app._routes` array. This \"route\" object\n     * contains `.match`, `.regex`, `.route` and `.handler` properties.\n     * Where `.match` is a function that accepts single argument \"pathname\"\n     * to check against given `route`, `.handler` is the passed `handler`\n     * function, `.regex` is the generated regex for that `route` string and\n     * the `.route` is the given `route`. The `.match` function returns `null`\n     * if passed \"pathname\" string match to the given `route` but not params\n     * and `false` if passed \"pathname\" not match.\n     *\n     * _**Note:** This method does not call the given route handler._\n     *\n     * **Example**\n     *\n     * ```js\n     * const r = app.createRoute('/user/:id', function abc (params) {\n     *   console.log('hi user with id:', params.id)\n     * })\n     *\n     * console.log(r.match) // => function\n     * console.log(r.handler) // => function\n     * console.log(r.handler.name) // => 'abc'\n     * console.log(r.route) // => '/user/:id'\n     * console.log(r.regex) // => /^\\/user\\/(\\w+)$/i\n     *\n     * var params = r.match('/user/123')\n     * console.log(params) // => { id: 123 }\n     *\n     * // manually call the route handler\n     * if (params !== false) {\n     *   r.handler(params || {})\n     * }\n     *\n     * // not match, so returns `false`\n     * params = r.match('/foobar')\n     * console.log(params) // => false\n     *\n     * var route = app.createRoute('/foobie', () => {})\n     *\n     * // match, but no params, so return `null`\n     * var res = route.match('/foobie')\n     * console.log(res) // => null\n     * ```\n     *\n     * @name  .createRoute\n     * @param {String} `route` a simple route, express-like definition, e.g. `/user/:id`\n     * @param {Function} `handler` a function to be called when `route` match\n     * @return {Object} a \"route\" object with few properties\n     * @api public\n     */\n\n    app.use(createRoutePlugin())\n\n    /**\n     * > Manually navigate to some route with url `pathname` and\n     * returns what the route handler returns. You can pass\n     * a custom `state` which will be passed to route handler's context\n     * as `context.state`. This method fires `notFound` event when\n     * not found match, and `route` when find a route.\n     *\n     * **Example**\n     *\n     * ```js\n     * app.on('notFound', (context) => {\n     *   console.log(`sorry ${context.pathname} page not exist`)\n     *   console.log('this is incoming state:', context.state)\n     * })\n     * app.navigate('/foo/bar/qux', { aa: 11 })\n     *\n     * app.addRoute('/hello/:place', (context) => {\n     *   console.log('hi', context.params.place) // => 'hi world'\n     * })\n     * app.navigate('/hello/world')\n     *\n     * // remove default \"on route\" handler\n     * app.off('route')\n     *\n     * // and define your custom one,\n     * // to change route handler arguments\n     * app.on('route', (handler, context) => {\n     *   return handler(context.state, context.params)\n     * })\n     *\n     * // notice the handler signature, it's different than\n     * // the default one seen in above `/hello/:place` route\n     * app.addRoute('/user/:name', (state, params) => {\n     *   var name = state.username || params.name\n     *\n     *   console.log('name:', name) // => 'name: john' or 'name: charlike'\n     *\n     *   return name\n     * })\n     *\n     * // it returns what the route handler return\n     * var res = app.navigate('/user/john')\n     * console.log(res) // => 'john', because there's no passed state\n     *\n     * var ret = app.navigate('/user/hey', { username: 'charlike '})\n     * console.log(ret) // => 'charlike'\n     * ```\n     *\n     * @name   .navigate\n     * @param  {String} `pathname` a url to navigate to\n     * @param  {any} `state` optionally pass a \"state\", passed to route's handler\n     * @return {any} basically returns what the route handler return\n     * @api public\n     */\n\n    app.navigate = function navigate (pathname, state) {\n      state = isObject(state) ? state : {}\n\n      var found = false\n      var len = app._routes.length\n      var i = 0\n\n      while (i < len) {\n        var r = app._routes[i++]\n        var params = r.match(pathname)\n\n        // if `false` -> no match and no params\n        // if `null` -> no params\n        if (params === false) {\n          continue\n        }\n        found = true\n\n        var context = {\n          state: state,\n          route: r.route,\n          params: params || {},\n          pathname: pathname\n        }\n\n        app.emit('route', function viewFn () {\n          el = r.handler.apply(app, arguments)\n          return el\n        }, context, el)\n      }\n\n      if (!found) {\n        app.emit('notFound', { pathname: pathname, state: state })\n      }\n\n      return el\n    }\n  }\n}\n\n/**\n * Utils\n */\n\nfunction isObject (val) {\n  return val && typeof val === 'object' && !Array.isArray(val)\n}\n\n/**\n * Internal plugin\n */\n\nfunction createRoutePlugin () {\n  return function createRoutePlugin_ (app) {\n    app.createRoute = function createRoute (route, handler) {\n      var r = makeRoute(route)\n      r.route = route\n      r.handler = handler\n      r.match = function match (pathname) {\n        return r.regex.test(pathname) ? collectParams(r, pathname) : false\n      }\n      return r\n    }\n  }\n}\n\nfunction makeRoute (route) {\n  var keys = []\n  var regex = '^' + route\n    .replace(/\\//g, '\\\\/')\n    .replace(/:(\\w+)/g, function (_, name) {\n      keys.push(name)\n      return '(\\\\w+)'\n    }) + '$'\n\n  return {\n    regex: new RegExp(regex, 'i'),\n    keys: keys\n  }\n}\n\nfunction collectParams (r, pathname) {\n  var match = null\n  r.params = {}\n  pathname.replace(r.regex, function (args) {\n    args = arguments\n    for (var i = 1; i < args.length - 2; i++) {\n      r.keys.forEach(function (key) {\n        r.params[key] = args[i]\n      })\n      match = true\n    }\n  })\n\n  return match ? r.params : match\n}\n","/*!\n * gibon <https://github.com/tunnckoCore/gibon>\n *\n * Copyright (c) Charlike Mike Reagent <@tunnckoCore> (https://i.am.charlike.online)\n * Released under the MIT license.\n */\n\n'use strict'\n\nimport dush from 'dush'\nimport router from 'dush-router'\n\nexport default function gibon (routes) {\n  return dush().use(router()).use((app) => {\n    // A bit backward compatibility\n    Object.keys(routes).forEach((route) => {\n      app.addRoute(route, routes[route])\n    })\n\n    onHistoryChange((node, e) => {\n      app.emit('historyChange', node, e)\n    })\n    onHrefChange((node, e) => {\n      app.emit('hrefChange', node, e)\n    })\n  })\n}\n\n/**\n * Utils\n */\n\nfunction onHistoryChange (cb) {\n  window.addEventListener('popstate', function onpopstate (e) {\n    const obj = {\n      pathname: window.location.pathname,\n      search: window.location.search,\n      href: window.location.href,\n      hash: window.location.hash\n    }\n\n    cb(obj, e)\n  })\n}\n\nfunction onHrefChange (cb) {\n  window.addEventListener('click', function onclick (e) {\n    if (which(e) !== 1) {\n      return\n    }\n    // clicks with combination\n    // of some common meta keys\n    if (\n      e.metaKey ||\n      e.ctrlKey ||\n      e.shiftKey ||\n      e.altKey ||\n      e.defaultPrevented\n    ) {\n      return\n    }\n\n    // ensure link\n    // use shadow dom when available\n    var el = e.path ? e.path[0] : e.target\n    while (el && el.nodeName !== 'A') {\n      el = el.parentNode\n    }\n\n    if (!el || el.nodeName !== 'A') {\n      return\n    }\n\n    // allow mailto links to work normally\n    var link = el.getAttribute('href')\n    if (link && link.indexOf('mailto:') > -1) {\n      return\n    }\n\n    // allow external links to work normally\n    var sameHost = el.host === window.location.host\n    if (!sameHost) {\n      return\n    }\n\n    // prevent default behaviour on internal links\n    if (sameHost || el.pathname === window.location.pathname) {\n      e.preventDefault()\n    }\n\n    // allow opt out when custom attribute\n    if (!el.hasAttribute('data-no-routing')) {\n      cb(el, e)\n      return\n    }\n  })\n}\n\nfunction which (e) {\n  e = e || window.event\n  return e.which === null ? e.button : e.which\n}\n"],"names":["dush","_allEvents","Object","create","app","use","plugin","options","on","name","handler","once","func","called","off","apply","arguments","e","fn","__sourceString","toString","push","fnStr","filter","emit","args","slice","call","map","isObject","val","Array","isArray","createRoutePlugin","createRoute","route","r","makeRoute","match","pathname","regex","test","collectParams","keys","replace","_","RegExp","params","i","length","forEach","key","gibon","routes","router","addRoute","onHistoryChange","node","onHrefChange","cb","window","addEventListener","const","obj","location","search","href","hash","which","metaKey","ctrlKey","shiftKey","altKey","defaultPrevented","el","path","target","nodeName","parentNode","link","getAttribute","indexOf","sameHost","host","preventDefault","hasAttribute","event","button","_routes","view","context","navigate","state","found","len"],"mappings":"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"}